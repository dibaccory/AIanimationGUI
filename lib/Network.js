class Network
{
  constructor(type, model)
  {
    this.type = type;   //Name of architecture.
    this.reconfigure(model); //TensorFlow Model
  }

  /*GOAL: Convert the model into the Layer classes

  FOR NOW: Loop through an array and add to this network.
  */
  reconfigure(model)
  {
      let data = model.getWeights();
      for(let i = 0; i < data.length; i++)
      {
          data[i].print();
      }
  }


  //Loops through the layers
  play()
  {

  }

}

var modelWeights = [[ [[-0.0100785, -0.0926846, -0.1779854, -0.0212033, -0.0534476, -0.0847183, 0.1151796 , 0.0435878 ],],

    [[0.0608331 , -0.0883953, -0.0936849, 0.1979927 , 0.0528398 , 0.2331367 , 0.1540325 , 0.1488166 ],],

    [[0.1501559 , -0.137774 , -0.0192727, 0.1920446 , -0.0253209, -0.0807648, -0.0820915, -0.1888789],],

    [[-0.1231716, -0.0207257, -0.13761  , -0.1488552, 0.0089757 , 0.0164416 , 0.0504052 , 0.0891214 ],],

    [[-0.2541927, -0.0972917, 0.0034232 , -0.2505056, 0.0067439 , -0.1326631, -0.0216122, -0.1775867],]],


    [ [[0.253193  , -0.1803208, -0.0494058, 0.2720864 , 0.1644057 , 0.0875807 , -0.0595016, 0.0116791 ],],

        [[0.0684026 , -0.119917 , 0.0510593 , 0.1160913 , -0.0020381, -0.0312417, 0.2024305 , 0.0974639 ],],

        [[0.3603177 , -0.1546184, -0.0335987, 0.0825392 , -0.1499956, 0.1294031 , 0.1331033 , -0.0499585],],

        [[0.2690535 , -0.0649132, -0.1116402, -0.0398559, -0.0997746, -0.2760072, -0.1584399, 0.0525137 ],],

        [[0.0710433 , 0.054287  , 0.2983396 , -0.0438573, 0.1428645 , -0.2752308, -0.0145382, -0.0104098],]],


    [ [[0.1915003 , 0.1771941 , -0.1872772, 0.1436367 , -0.1188188, 0.1980681 , 0.0887257 , 0.1872758 ],],

        [[0.0804014 , 0.2487269 , -0.1190102, 0.2971379 , -0.0558856, 0.2100542 , 0.2475189 , 0.1085245 ],],

        [[0.3264494 , 0.3409407 , -0.2001609, -0.1642347, -0.0292082, -0.1112201, 0.2087248 , -0.1665176],],

        [[0.1955168 , 0.1567282 , 0.1716415 , -0.2023328, -0.1609539, -0.1697665, -0.1828355, 0.031095  ],],

        [[0.264306  , 0.0318535 , 0.2486022 , -0.1338663, -0.0210827, -0.2806498, 0.0309456 , -0.155761 ],]],


    [ [[-0.0542699, 0.3526738 , -0.0376197, 0.2896341 , 0.0203561 , 0.3443821 , 0.1605971 , 0.0932926 ],],

        [[-0.0284679, 0.4886503 , -0.0331969, 0.137491  , -0.058662 , 0.4212697 , 0.2353436 , 0.1262039 ],],

        [[0.1638906 , 0.3903882 , -0.0077323, -0.176631 , 0.1202345 , 0.2778099 , 0.2455735 , 0.0734968 ],],

        [[0.1207769 , 0.4378519 , 0.0534717 , -0.1737255, -0.0736014, 0.0310177 , -0.0264689, -0.1235561],],

        [[0.1362339 , 0.0553093 , 0.1705679 , -0.1090998, 0.0738752 , -0.0459079, -0.0809636, 0.1386205 ],]],


    [ [[-0.1383991, 0.0202151 , -0.163918 , 0.2885689 , 0.040607  , 0.2534642 , 0.2955228 , -0.1799432],],

        [[-0.2628008, 0.1881296 , -0.1546017, 0.1699023 , 0.0910757 , 0.1486657 , 0.1582853 , -0.0884618],],

        [[-0.1429386, 0.2764802 , -0.0118991, -0.0628457, -0.0559353, 0.3904435 , 0.0029899 , 0.2153097 ],],

        [[0.0454526 , 0.1037083 , 0.2861662 , -0.1365776, -0.180031 , 0.3175843 , 0.1474243 , 0.1397399 ],],

        [[-0.0844862, 0.0481225 , 0.1223473 , -0.2097131, -0.0187524, 0.1371156 , -0.1749155, -0.0054046],]]];


//fall-back

let mnistNetwork =
    [
        new Layer("input", new THREE.Vector3(10,10,1), []/*DATA*/, 0),
        new Convolution(new THREE.Vector3(3,3,6), []/*WEIGHTS*/,  /*previous layer last node.position.z + */ LAYER_GAP, 1, 1, 1, "tanh"),
        0, // this will be created as the animation goes
        new Pool(new THREE.Vector3(2,2,6), /*previous layer last node.position.z + */ LAYER_GAP, 2, "max"),
        new Dense("Fully Connected", new THREE.Vector3(1,5,1), []/*WEIGHTS*/,  /*previous layer last node.position.z + */ LAYER_GAP, "tanh"),
        new Dense("output", new THREE.Vector3(1,3,1), []/*WEIGHTS*/,  /*previous layer last node.position.z + */ LAYER_GAP, "tanh")
    ];
/*scene.add(mnistNetwork[0].nodes[k][j][i])


PATH:

*/
